<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1401733515247">{:repl-history {:ide [], :local [&quot;(defdb db (sqlite3\n            {:classname   \&quot;org.sqlite.JDBC\&quot;\n             :subprotocol \&quot;sql\&quot;\n             :db \&quot;korma.db\&quot;}))&quot; &quot;(defdb db (sqlite3\n            {:db \&quot;resources/korma.db\&quot;}))&quot; &quot;(defproject shortener \&quot;0.1.0-SNAPSHOT\&quot;\n  :description \&quot;FIXME: write description\&quot;\n  :url \&quot;http://example.com/FIXME\&quot;\n  :license {:name \&quot;Eclipse Public License\&quot;\n            :url \&quot;http://www.eclipse.org/legal/epl-v10.html\&quot;}\n  :dependencies [[org.clojure/clojure \&quot;1.5.1\&quot;]\n                 [compojure \&quot;1.1.6\&quot;]\n                 [ring \&quot;1.0.1\&quot;]\n                 [korma \&quot;0.3.0-RC5\&quot;]\n                 [org.xerial/sqlite-jdbc \&quot;3.7.2\&quot;]]\n  :plugins [[lein-ring \&quot;0.8.10\&quot;]]\n  :ring {:handler shortener.core/app}\n  :main shortener.core)&quot; &quot;(declare user)&quot; &quot;(defentity\n  user\n  (table :user)\n  (database db)\n  (entity-fields :username))&quot; &quot;(use 'korma.core)&quot; &quot;(defentity\n  tableEntity\n  (table :user))&quot; &quot;(defdb db (sqlite3\n            {:classname   \&quot;org.sqlite.JDBC\&quot;\n             :subprotocol \&quot;sql\&quot;\n             :db \&quot;korma\&quot;\n             :subname     \&quot;/resources/korma.db\&quot;}))&quot; &quot;(defdb db (sqlite3\n            {:classname   \&quot;org.sqlite.JDBC\&quot;\n             :subprotocol \&quot;sql\&quot;\n             :db \&quot;korma\&quot;\n             :subname     \&quot;resources/korma.db\&quot;}))&quot; &quot;(defdb db (sqlite3\n            {:classname   \&quot;org.sqlite.JDBC\&quot;\n             :subprotocol \&quot;sql\&quot;\n             :db \&quot;korma\&quot;\n             :subname     \&quot;resourc/korma.db\&quot;}))&quot; &quot;(defdb db (sqlite3\n            {:classname   \&quot;org.sqlite.JDBC\&quot;\n             :subprotocol \&quot;sql\&quot;\n             :db \&quot;korma\&quot;}))&quot; &quot;(defentity\n  tableEntity\n  (table :user)\n  (database db))&quot; &quot;(map #(ns-unmap *ns* %) (keys (ns-interns *ns*)))&quot; &quot;(.stop server\n       )&quot; &quot;server&quot; &quot;(+1 2)&quot; &quot;(* 1 2)&quot; &quot;(+ 1  2 3 )&quot; &quot;(+ 1 2)&quot; &quot;(app)&quot; &quot;(+ 1 2 3)&quot; &quot;(+ 1 2 3 4)&quot; &quot;(+ 1 2 3 4 (* 1 3))&quot; &quot;def&quot; &quot;(defn run-server []\n  ;(use 'ring.adapter.jetty)\n  (def\n    server\n    (run-jetty\n      #'app\n      {:host \&quot;127.0.0.1\&quot; :port 8084 :join? false})))&quot; &quot;(defn run-server []\n  ;(use 'ring.adapter.jetty)\n  (dosync\n    (ref-set\n      server\n      (run-jetty\n        #'app\n        {:host \&quot;127.0.0.1\&quot; :port 8084 :join? false}))))&quot; &quot;(defn -main [&amp; args]\n  (run-server))&quot; &quot;(defn run-server []\n  ;(use 'ring.adapter.jetty)\n  (dosync\n    (ref-set\n      server\n      (run-jetty\n        #'app\n        {:host \&quot;127.0.0.1\&quot; :port 8085 :join? false}))))&quot; &quot;(.stop server)&quot; &quot;(.stop @server)&quot; &quot;(def db {:classname   \&quot;org.sqlite.JDBC\&quot;\n         :subprotocol \&quot;sql\&quot;\n         :subname     \&quot;resources/korma.db\&quot;})&quot; &quot;(ns shortener.myDB)&quot; &quot;(use 'korma.db)&quot; &quot;(ns shortener.myDB\n  (:use [korma db]))&quot; &quot;(:use korma.db)&quot; &quot;(ns shortener.core\n  (:use [compojure.core :only (GET PUT POST defroutes)]\n        [korma db])\n  (:require (compojure handler route)\n            [ring.util.response :as response]))&quot; &quot;(select tableEntity)&quot; &quot;(defdb db (sqlite3\n            {:classname   \&quot;org.sqlite.JDBC\&quot;\n             :subprotocol \&quot;sql\&quot;\n             :db \&quot;korma1\&quot;}))&quot; &quot;(select-all)&quot; &quot;(defn listUrl []\n  (flatten (interpose \&quot;&lt;br&gt;\&quot; (map (partial interpose \&quot;&amp;nbsp;&amp;nbsp;\&quot;)\n                                  (db/select-all)))))&quot; &quot;(listUrl)&quot; &quot;(flatten (interpose \&quot;&lt;br&gt;\&quot; (map (partial interpose \&quot;&amp;nbsp;&amp;nbsp;\&quot;)\n                                (vec {\&quot;hi\&quot; \&quot;http://www.baidu.com\&quot;}))))&quot; &quot;(db/select-all)&quot; &quot;(map (partial interpose \&quot;&amp;nbsp;&amp;nbsp;\&quot;)\n                                (vec {\&quot;hi\&quot; \&quot;http://www.baidu.com\&quot;}))&quot; &quot;(map (fn [m]\n                                    (let [:keys {id url}]\n                                      (vec id \&quot;&amp;nbsp;&amp;nbsp;\&quot;))) \n                                  (db/select-all))&quot; &quot;(map (fn [m]\n                                    (let [:keys {id url} m]\n                                      (vec id \&quot;&amp;nbsp;&amp;nbsp;\&quot;))) \n                                  (db/select-all))&quot; &quot;(map (fn [m]\n                                    (let [:keys [id url] m]\n                                      (vec id \&quot;&amp;nbsp;&amp;nbsp;\&quot;))) \n                                  (db/select-all))&quot; &quot;(map (fn [m]\n                                    (let [{:keys [id url]} m]\n                                      (vec id \&quot;&amp;nbsp;&amp;nbsp;\&quot;))) \n                                  (db/select-all))&quot; &quot;(map (partial interpose \&quot;&amp;nbsp;&amp;nbsp;\&quot;)\n                                (vec {\&quot;hi\&quot; \&quot;http://www.baidu.com\&quot;\n                                      \&quot;hi\&quot; \&quot;w\&quot;}))&quot; &quot;(map (partial interpose \&quot;&amp;nbsp;&amp;nbsp;\&quot;)\n                                (vec {\&quot;hi\&quot; \&quot;http://www.baidu.com\&quot;\n                                      \&quot;hi1\&quot; \&quot;w\&quot;}))&quot; &quot;(map (fn [m]\n                                    (let [{:keys [id url]} m]\n                                      (list id \&quot;&amp;nbsp;&amp;nbsp;\&quot; url))) \n                                  (db/select-all))&quot; &quot;(defn insert-db [id url]\n  (println id url)\n  )&quot; &quot;(defn insert-db [id url]\n  (insert urls values {:id id :url url}))&quot; &quot;(defn insert-db [id url]\n  (insert urls (values {:id id :url url})))&quot; &quot;(defn shorten!\n  [url id]\n  (when-not (db/get-url-by-id id)\n    (db/insert-db id url)\n    id))&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>

